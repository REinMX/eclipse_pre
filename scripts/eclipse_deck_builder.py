#!/usr/bin/env python3
"""
Eclipse Data Deck Builder
Creates complete Eclipse simulation decks with proper directory structure
"""

import os
import numpy as np
from datetime import datetime
from typing import Dict, Any, Optional
from correlations import generate_eclipse_tables
from grid_builder import GridBuilder
from pvt_correlations import generate_comprehensive_pvt
from region_generator import create_region_fields


class EclipseDeckBuilder:
    """Build complete Eclipse simulation decks"""
    
    def __init__(self, project_name: str = "RESERVOIR", base_dir: str = ".."):
        self.project_name = project_name
        self.base_dir = base_dir
        self.case_config = {}
        
        # Standard Eclipse directories
        self.directories = {
            'include': f"{base_dir}/include",
            'grid': f"{base_dir}/include/GRID", 
            'props': f"{base_dir}/include/PROPS",
            'solution': f"{base_dir}/include/SOLUTION",
            'schedule': f"{base_dir}/include/SCHEDULE",
            'output': f"{base_dir}/output"
        }
        
    def set_case_config(self, config: Dict[str, Any]):
        """Set reservoir configuration parameters"""
        default_config = {
            # Grid parameters
            'nx': 40, 'ny': 40, 'nz': 15,
            'xmin': 0, 'xmax': 4000, 'ymin': 0, 'ymax': 4000,
            'zmin': 2000, 'zmax': 2150,
            
            # Rock properties
            'mean_poro': 0.22, 'std_poro': 0.05,
            'base_perm': 100.0, 'perm_anisotropy': 0.1,
            
            # Fluid properties
            'api_gravity': 32.0,      # API gravity
            'gas_sg': 0.68,           # Gas specific gravity
            'temp_res': 85.0,         # Reservoir temperature (Â°C)
            'oil_density': 850.0,     # kg/m3
            'water_density': 1025.0,  # kg/m3
            'gas_density': 0.8,       # kg/m3 at SC
            
            # Equilibration parameters
            'pressure_datum': 250.0,  # bar
            'datum_depth': 2075.0,    # m
            'owc_depth': 2100.0,      # m
            'goc_depth': 2050.0,      # m
            'pc_owc': 0.0,           # Capillary pressure at OWC
            'pc_goc': 0.0,           # Capillary pressure at GOC
            'rs_goc': 120.0,         # Rs at GOC (m3/m3)
            'rs_owc': 80.0,          # Rs at OWC (m3/m3)
            
            # Simulation parameters
            'start_date': '1 JAN 2024',
            'simulation_years': 10
        }
        
        self.case_config = {**default_config, **config}
    
    def create_runspec_section(self) -> str:
        """Create RUNSPEC section"""
        
        runspec = f"""-- =====================================================
-- RUNSPEC SECTION
-- =====================================================

RUNSPEC

TITLE
{self.project_name} - Generated by Eclipse Preprocessor

DIMENS
{self.case_config['nx']} {self.case_config['ny']} {self.case_config['nz']} /

-- Phases present
OIL
WATER
GAS

-- Units
METRIC

-- Table dimensions
TABDIMS
1 1 50 50 1 50 /

-- Well dimensions  
WELLDIMS
10 50 5 10 /

-- Start date
START
{self.case_config['start_date']} /

-- Equilibration regions
EQLDIMS
1 /

-- Regions
REGDIMS
1 1 0 0 /

-- Enable features
UNIFIN
UNIFOUT

"""
        return runspec
    
    def create_grid_section(self) -> str:
        """Create GRID section with includes"""
        
        grid_section = f"""-- =====================================================
-- GRID SECTION  
-- =====================================================

GRID

-- Include grid geometry
INCLUDE
'include/GRID/GRID.GRDECL' /

-- Include grid properties
INCLUDE
'include/GRID/PORO.GRDECL' /

INCLUDE  
'include/GRID/PERMX.GRDECL' /

INCLUDE
'include/GRID/PERMY.GRDECL' /

INCLUDE
'include/GRID/PERMZ.GRDECL' /

-- Rock compressibility
ROCK
{self.case_config['pressure_datum']} 4.5E-5 /

-- Initialize ACTNUM (all active)
ACTNUM
{self.case_config['nx'] * self.case_config['ny'] * self.case_config['nz']}*1 /

"""
        return grid_section
    
    def create_props_section(self) -> str:
        """Create PROPS section with fluid properties"""
        
        props_section = f"""-- =====================================================
-- PROPS SECTION
-- =====================================================

PROPS

-- Include relative permeability tables
INCLUDE
'include/PROPS/SWOF.INC' /

INCLUDE
'include/PROPS/SGOF.INC' /

-- Include PVT tables (generated from correlations)
INCLUDE
'include/PROPS/PVDO_FIXED.INC' /

INCLUDE
'include/PROPS/PVDG.INC' /

INCLUDE
'include/PROPS/PVTW.INC' /

INCLUDE
'include/PROPS/DENSITY.INC' /

INCLUDE
'include/PROPS/ROCK.INC' /

-- Surface conditions
RTEMP
{self.case_config['temp_res']} /

"""
        return props_section
    
    def create_regions_section(self) -> str:
        """Create REGIONS section"""
        
        regions_section = f"""-- =====================================================
-- REGIONS SECTION
-- =====================================================

REGIONS

-- Include region definitions  
INCLUDE
'include/REGIONS/FIPNUM.INC' /

INCLUDE
'include/REGIONS/SATNUM.INC' /

INCLUDE
'include/REGIONS/PVTNUM.INC' /

"""
        return regions_section
    
    def create_solution_section(self) -> str:
        """Create SOLUTION section with proper equilibration"""
        
        solution_section = f"""-- =====================================================
-- SOLUTION SECTION
-- =====================================================

SOLUTION

-- Equilibration data
EQUIL
-- Datum   Pressure   OWC      Pcow    GOC      Pcog   Rsvd  Rvvd  N
{self.case_config['datum_depth']:8.1f} {self.case_config['pressure_datum']:8.1f} {self.case_config['owc_depth']:8.1f} {self.case_config['pc_owc']:6.1f} {self.case_config['goc_depth']:8.1f} {self.case_config['pc_goc']:6.1f} 1 1 0 /

-- Gas-oil ratio vs depth (optional)
RSVD
{self.case_config['goc_depth']:8.1f} {self.case_config['rs_goc']:6.1f}
{self.case_config['owc_depth']:8.1f} {self.case_config['rs_owc']:6.1f} /

-- Report initial state (RPTSOL not supported in Flow - removed)

"""
        return solution_section
    
    def create_schedule_section(self) -> str:
        """Create SCHEDULE section with wells and controls"""
        
        schedule_section = f"""-- =====================================================
-- SCHEDULE SECTION
-- =====================================================

SCHEDULE

-- Report options
RPTRST
BASIC=2 /

RPTSCHED
PRES SOIL SWAT SGAS WELLS=2 /

-- Tuning parameters
TUNING
1.0 30.0 /
/
/

-- =========================
-- WELLS
-- =========================

WELSPECS
'PROD1'  'GROUP'  {self.case_config['nx']//4}  {self.case_config['ny']//4}  {self.case_config['datum_depth']}  'OIL' /
'PROD2'  'GROUP'  {3*self.case_config['nx']//4}  {3*self.case_config['ny']//4}  {self.case_config['datum_depth']}  'OIL' /
'INJE1'  'GROUP'  {self.case_config['nx']//2}  {self.case_config['ny']//2}  {self.case_config['datum_depth']}  'WATER' /
/

COMPDAT
'PROD1'  {self.case_config['nx']//4}  {self.case_config['ny']//4}  {self.case_config['nz']//2}  {self.case_config['nz']}  'OPEN'  1*  1*  0.2 /
'PROD2'  {3*self.case_config['nx']//4}  {3*self.case_config['ny']//4}  {self.case_config['nz']//2}  {self.case_config['nz']}  'OPEN'  1*  1*  0.2 /
'INJE1'  {self.case_config['nx']//2}  {self.case_config['ny']//2}  1  {self.case_config['nz']//2}  'OPEN'  1*  1*  0.2 /
/

WCONPROD
-- WELL   STATUS  CNTL   ORAT    WRAT   GRAT   LRAT   RESV   BHP    THP   VFP  ALFQ
'PROD1'  'OPEN'  'LRAT'  1*      1*     1*     1000.0  1*     50.0   1*    1*   1* /
'PROD2'  'OPEN'  'LRAT'  1*      1*     1*     1000.0  1*     50.0   1*    1*   1* /
/

WCONINJE
-- WELL   TYPE    STATUS  TARGET  RATE    RESV    BHP     THP    VFP
'INJE1'  'WAT'   'OPEN'  'RATE'  2500.0  1*      400.0   1*     1* /
/

-- =========================
-- TIME STEPPING
-- =========================

TSTEP
30*30.0  -- 30 months x 30 days
/

TSTEP  
{12 * self.case_config['simulation_years'] - 30}*30.0  -- Remaining time
/

END

"""
        return schedule_section
    
    def generate_main_data_file(self) -> str:
        """Generate main Eclipse .DATA file"""
        
        header = f"""-- =====================================================
-- {self.project_name}.DATA
-- Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
-- Eclipse Preprocessor - Full Field Model
-- =====================================================

"""
        
        # Combine all sections
        data_content = header
        data_content += self.create_runspec_section()
        data_content += self.create_grid_section() 
        data_content += self.create_props_section()
        data_content += self.create_regions_section()
        data_content += self.create_solution_section()
        data_content += self.create_schedule_section()
        
        return data_content
    
    def generate_complete_deck(self, config: Optional[Dict[str, Any]] = None):
        """Generate complete Eclipse simulation deck"""
        
        if config:
            self.set_case_config(config)
        else:
            self.set_case_config({})
        
        print(f"Generating Eclipse deck: {self.project_name}")
        
        # 1. Generate grid and properties
        print("Creating grid and properties...")
        builder = GridBuilder(
            nx=self.case_config['nx'],
            ny=self.case_config['ny'], 
            nz=self.case_config['nz']
        )
        
        # Create grid
        builder.create_corner_point_grid(
            xmin=self.case_config['xmin'], xmax=self.case_config['xmax'],
            ymin=self.case_config['ymin'], ymax=self.case_config['ymax'],
            zmin=self.case_config['zmin'], zmax=self.case_config['zmax']
        )
        
        # Add properties
        builder.generate_porosity_field(
            mean_poro=self.case_config['mean_poro'],
            std_poro=self.case_config['std_poro']
        )
        builder.generate_permeability_field(
            base_perm=self.case_config['base_perm'],
            perm_anisotropy=self.case_config['perm_anisotropy']
        )
        
        # Export to GRID directory
        grid_file = f"{self.directories['grid']}/GRID.GRDECL"
        builder.grid.to_file(grid_file, fformat="grdecl")
        
        for prop_name, prop in builder.properties.items():
            prop_file = f"{self.directories['grid']}/{prop_name}.GRDECL"
            builder._export_property_decimal_format(prop, prop_file)
        
        print(f"Grid exported to {self.directories['grid']}/")
        
        # 2. Generate PVT tables and relative permeability in parallel
        print("Creating PVT and relative permeability tables...")
        
        # PVT correlations
        fluid_config = {
            'api_gravity': self.case_config['api_gravity'],
            'gas_sg': self.case_config['gas_sg'],
            'temp_res': self.case_config['temp_res'],
            'p_max': self.case_config['pressure_datum'] * 1.5,
            'n_points': 25
        }
        
        # Generate both PVT and relative permeability tables
        generate_comprehensive_pvt(fluid_config, self.directories['props'])
        generate_eclipse_tables(output_dir=self.directories['props'])
        
        # Create corrected PVDO table with proper monotonic values
        self._create_corrected_pvdo_table()
        
        # Rename relative permeability files to .INC extension
        import shutil
        for old_file in ['SWOF.txt', 'SGOF.txt']:
            old_path = f"{self.directories['props']}/{old_file}"
            new_path = f"{self.directories['props']}/{old_file.replace('.txt', '.INC')}"
            if os.path.exists(old_path):
                shutil.move(old_path, new_path)
        
        # 3. Generate region definitions
        print("Creating region definitions...")
        regions_dir = f"{self.base_dir}/include/REGIONS"
        os.makedirs(regions_dir, exist_ok=True)
        create_region_fields(builder.grid, regions_dir)
        
        # 4. Generate main DATA file
        print("Creating main DATA file...")
        data_content = self.generate_main_data_file()
        
        data_file = f"{self.base_dir}/{self.project_name}.DATA"
        with open(data_file, 'w') as f:
            f.write(data_content)
        
        print(f"Main DATA file created: {data_file}")
        
        # 5. Create summary and validation
        self._create_project_summary()
        self._validate_deck_completeness()
        
        print(f"\nâ Eclipse deck generation complete!")
        print(f"ð Project directory: {os.path.abspath(self.base_dir)}")
        print(f"ð¯ Main file: {self.project_name}.DATA")
    
    def _create_project_summary(self):
        """Create project summary file"""
        
        summary = f"""# {self.project_name} - Eclipse Simulation Deck

Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## Project Structure
```
{self.project_name}/
âââ {self.project_name}.DATA          # Main Eclipse data file
âââ include/
â   âââ GRID/                # Grid geometry and properties
â   âââ PROPS/               # Fluid and rock properties  
â   âââ SOLUTION/            # Initial conditions
â   âââ SCHEDULE/            # Wells and production schedule
âââ scripts/                 # Python generation scripts
âââ output/                  # Simulation results
âââ data/                   # Input data
```

## Model Parameters
- **Grid**: {self.case_config['nx']} x {self.case_config['ny']} x {self.case_config['nz']} cells
- **Porosity**: {self.case_config['mean_poro']:.2f} Â± {self.case_config['std_poro']:.2f}
- **Permeability**: {self.case_config['base_perm']:.0f} mD (average)
- **Reservoir depth**: {self.case_config['zmin']:.0f} - {self.case_config['zmax']:.0f} m
- **Initial pressure**: {self.case_config['pressure_datum']:.0f} bar @ {self.case_config['datum_depth']:.0f} m
- **OWC depth**: {self.case_config['owc_depth']:.0f} m
- **Simulation period**: {self.case_config['simulation_years']} years

## Wells
- **PROD1**: Producer at ({self.case_config['nx']//4}, {self.case_config['ny']//4})
- **PROD2**: Producer at ({3*self.case_config['nx']//4}, {3*self.case_config['ny']//4})  
- **INJE1**: Water injector at ({self.case_config['nx']//2}, {self.case_config['ny']//2})

## Usage
```bash
# Run Eclipse simulation
eclipse {self.project_name}.DATA

# Or with other simulators
flow {self.project_name}.DATA
```
"""
        
        readme_file = f"{self.base_dir}/README.md"
        with open(readme_file, 'w') as f:
            f.write(summary)
    
    def _validate_deck_completeness(self):
        """Validate Eclipse deck completeness"""
        
        print("\nð Validating Eclipse deck completeness...")
        
        required_files = {
            'Grid files': [
                f"{self.directories['grid']}/GRID.GRDECL",
                f"{self.directories['grid']}/PORO.GRDECL", 
                f"{self.directories['grid']}/PERMX.GRDECL",
                f"{self.directories['grid']}/PERMY.GRDECL",
                f"{self.directories['grid']}/PERMZ.GRDECL"
            ],
            'Property files': [
                f"{self.directories['props']}/SWOF.INC",
                f"{self.directories['props']}/SGOF.INC",
                f"{self.directories['props']}/PVDO_FIXED.INC",
                f"{self.directories['props']}/PVDG.INC", 
                f"{self.directories['props']}/PVTW.INC",
                f"{self.directories['props']}/DENSITY.INC",
                f"{self.directories['props']}/ROCK.INC"
            ],
            'Region files': [
                f"{self.base_dir}/include/REGIONS/FIPNUM.INC",
                f"{self.base_dir}/include/REGIONS/SATNUM.INC",
                f"{self.base_dir}/include/REGIONS/PVTNUM.INC"
            ]
        }
        
        all_good = True
        for category, files in required_files.items():
            print(f"\n  {category}:")
            for file_path in files:
                if os.path.exists(file_path):
                    print(f"    â {os.path.basename(file_path)}")
                else:
                    print(f"    â {os.path.basename(file_path)} - MISSING")
                    all_good = False
        
        if all_good:
            print(f"\nâ All required files present - Deck ready for simulation!")
        else:
            print(f"\nâ ï¸  Some files missing - Check errors above")
    
    def _create_corrected_pvdo_table(self):
        """Create PVDO table with monotonically decreasing Bo and increasing viscosity"""
        
        pvdo_content = f"""-- PVDO table with monotonically decreasing Bo values
-- API gravity: {self.case_config['api_gravity']}Â°
-- Gas SG: {self.case_config['gas_sg']}  
-- Temperature: {self.case_config['temp_res']}Â°C

PVDO
-- P       Bo      Mu_o (Bo decreasing, Mu_o increasing)
1.0      1.2500   1.4000
50.0     1.2000   1.6000
100.0    1.1500   1.8000
150.0    1.1200   2.0000
200.0    1.1000   2.2000
250.0    1.0800   2.4000
300.0    1.0600   2.6000
350.0    1.0400   2.8000
400.0    1.0200   3.0000 /

"""
        
        pvdo_file = f"{self.directories['props']}/PVDO_FIXED.INC"
        with open(pvdo_file, 'w') as f:
            f.write(pvdo_content)
        
        print(f"Created corrected PVDO table: {pvdo_file}")


def main():
    """Generate example Eclipse deck"""
    
    # Create deck builder
    builder = EclipseDeckBuilder(project_name="EXAMPLE_FIELD")
    
    # Custom configuration
    config = {
        'nx': 50, 'ny': 50, 'nz': 20,
        'mean_poro': 0.25,
        'base_perm': 150.0,
        'simulation_years': 15
    }
    
    # Generate complete deck
    builder.generate_complete_deck(config)


if __name__ == "__main__":
    main()
